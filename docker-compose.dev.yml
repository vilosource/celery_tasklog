## 
# The development docker compose. This mounts the source code as bind volumes so we don't have to keep 
# rebuilding the image when we change the code.
## 

services:
  app:
    image: djproject:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./celery_tasklog/src/celery_tasklog:/app/celery_tasklog
      - ./demo:/app/demo
      - ./djproject:/app/djproject
      - ./manage.py:/app/manage.py
      - ./entrypoint.sh:/app/entrypoint.sh
    entrypoint: ["/app/entrypoint.sh"]
    command: gunicorn djproject.asgi:application -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --workers 4 --timeout 120
    depends_on:
      - postgres
      - redis
    networks:
      - mynetwork

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - mynetwork

  celery:
    image: djproject:latest
    env_file:
      - .env
    command: celery -A djproject worker --loglevel=info
    volumes:
      - ./celery_tasklog/src/celery_tasklog:/app/celery_tasklog
      - ./demo:/app/demo
      - ./djproject:/app/djproject
      - ./manage.py:/app/manage.py
    depends_on:
      - postgres
      - redis
    networks:
      - mynetwork

  postgres:
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data:
